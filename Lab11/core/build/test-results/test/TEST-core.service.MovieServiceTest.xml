<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="core.service.MovieServiceTest" tests="1" skipped="0" failures="0" errors="0" timestamp="2020-06-01T21:28:56" hostname="DESKTOP-3G564KV" time="0.517">
  <properties/>
  <testcase name="addMovie" classname="core.service.MovieServiceTest" time="0.517"/>
  <system-out><![CDATA[Hibernate: create table app_user (id bigint generated by default as identity, first_name varchar(255) not null, last_name varchar(255) not null, password varchar(255) not null, user_role varchar(255) not null, user_name varchar(255) not null, primary key (id))
Hibernate: create table client (id integer generated by default as identity, age integer not null check (age>=0 AND age<=120), name varchar(50) not null, primary key (id))
Hibernate: create table movie (id integer generated by default as identity, genre varchar(50) not null, title varchar(100) not null, year integer not null check (year<=2030 AND year>=0), primary key (id))
Hibernate: create table rent (id integer generated by default as identity, client_id integer, movie_id integer, primary key (id))
Hibernate: alter table app_user drop constraint if exists UK_cpt2jpnop7mcpds1sv2i5629w
Hibernate: alter table app_user add constraint UK_cpt2jpnop7mcpds1sv2i5629w unique (user_name)
Hibernate: alter table client drop constraint if exists UK_dn5jasds5r1j3ewo5k3nhwkkq
Hibernate: alter table client add constraint UK_dn5jasds5r1j3ewo5k3nhwkkq unique (name)
Hibernate: alter table movie drop constraint if exists UK_o6ifx5x4vtwfrpu1a42l8u81w
Hibernate: alter table movie add constraint UK_o6ifx5x4vtwfrpu1a42l8u81w unique (title)
Hibernate: alter table rent add constraint FKtl9uohe6mseu8h2e3r5jptf4l foreign key (client_id) references client
Hibernate: alter table rent add constraint FK44khc41jg6edti3lyiplnelj8 foreign key (movie_id) references movie
Hibernate: select distinct movie0_.id as id1_2_0_, rentals1_.id as id1_3_1_, client2_.id as id1_1_2_, movie0_.genre as genre2_2_0_, movie0_.title as title3_2_0_, movie0_.year as year4_2_0_, rentals1_.client_id as client_i2_3_1_, rentals1_.movie_id as movie_id3_3_1_, rentals1_.movie_id as movie_id3_3_0__, rentals1_.id as id1_3_0__, client2_.age as age2_1_2_, client2_.name as name3_1_2_ from movie movie0_ left outer join rent rentals1_ on movie0_.id=rentals1_.movie_id left outer join client client2_ on rentals1_.client_id=client2_.id
Hibernate: select distinct movie0_.id as id1_2_, movie0_.genre as genre2_2_, movie0_.title as title3_2_, movie0_.year as year4_2_ from movie movie0_
Hibernate: select movie0_.id as id1_2_1_, movie0_.genre as genre2_2_1_, movie0_.title as title3_2_1_, movie0_.year as year4_2_1_, rentals1_.movie_id as movie_id3_3_3_, rentals1_.id as id1_3_3_, rentals1_.id as id1_3_0_, rentals1_.client_id as client_i2_3_0_, rentals1_.movie_id as movie_id3_3_0_ from movie movie0_ left outer join rent rentals1_ on movie0_.id=rentals1_.movie_id where movie0_.id=?
Hibernate: insert into movie (id, genre, title, year) values (null, ?, ?, ?)
Hibernate: select movie0_.id as id1_2_, movie0_.genre as genre2_2_, movie0_.title as title3_2_, movie0_.year as year4_2_ from movie movie0_
Hibernate: select distinct movie0_.id as id1_2_0_, rentals1_.id as id1_3_1_, client2_.id as id1_1_2_, movie0_.genre as genre2_2_0_, movie0_.title as title3_2_0_, movie0_.year as year4_2_0_, rentals1_.client_id as client_i2_3_1_, rentals1_.movie_id as movie_id3_3_1_, rentals1_.movie_id as movie_id3_3_0__, rentals1_.id as id1_3_0__, client2_.age as age2_1_2_, client2_.name as name3_1_2_ from movie movie0_ left outer join rent rentals1_ on movie0_.id=rentals1_.movie_id left outer join client client2_ on rentals1_.client_id=client2_.id
]]></system-out>
  <system-err><![CDATA[ERROR StatusLogger No log4j2 configuration file found. Using default configuration: logging only errors to the console. Set system property 'log4j2.debug' to show Log4j2 internal initialization logging.
]]></system-err>
</testsuite>
